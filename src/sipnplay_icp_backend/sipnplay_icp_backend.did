type GameData = record { id : principal; game_play_count : nat32 };
type LeaderboardData = record {
  high_score : nat32;
  owner : principal;
  points : nat32;
};
type MessageData = record {
  date : int64;
  name : text;
  email : text;
  message : text;
};
type PaginatedResult = record {
  data : vec MessageData;
  total_pages : nat;
  current_page : nat;
};
type PaginatedResult_1 = record {
  data : vec WaitlistData;
  total_pages : nat;
  current_page : nat;
};
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok : nat; Err : text };
type Result_2 = variant { Ok : vec GameData; Err : text };
type Result_3 = variant { Ok : vec SortedLeaderboardData; Err : text };
type Result_4 = variant { Ok : LeaderboardData; Err : text };
type Result_5 = variant { Ok : PaginatedResult; Err : text };
type Result_6 = variant { Ok : vec LeaderboardData; Err : text };
type Result_7 = variant { Ok : UserCreationInput; Err : text };
type Result_8 = variant { Ok : PaginatedResult_1; Err : text };
type RewardedPlayers = record { owner : principal; amount : nat64 };
type SortedLeaderboardData = record {
  high_score : nat32;
  owner : principal;
  points : nat32;
};
type UserCreationInput = record { id : principal; email : text };
type WaitlistData = record {
  date : int64;
  name : text;
  icp_address : text;
  email : text;
};
service : () -> {
  add_money : (text) -> (Result);
  create_user : (text) -> (text);
  deduct_money : (nat) -> (Result);
  game_over : (text, text) -> (Result);
  game_reset : (text) -> (Result);
  game_start : (text) -> (Result);
  get_backend_balance : () -> (Result_1);
  get_caller_balance : () -> (Result_1);
  get_current_principal : () -> (text) query;
  get_game_data : (text) -> (Result_2) query;
  get_high_score : (text) -> (Result) query;
  get_leaderboard : (text) -> (Result_3, nat) query;
  get_logged_in_user_leaderboard : (text) -> (Result_4) query;
  get_messages : (nat, nat) -> (Result_5) query;
  get_top_ten_players : (text) -> (Result_6) query;
  get_user : () -> (Result_7) query;
  get_waitlist : (nat, nat) -> (Result_8) query;
  is_approved : () -> (bool) query;
  is_authenticated : () -> (bool) query;
  join_waitlist : (text, text, text) -> (Result);
  reward_distributionre : (vec RewardedPlayers) -> (Result_1);
  send_message : (text, text, text) -> (Result);
  withdraw_money_from_default : (nat64) -> (Result_1);
}
